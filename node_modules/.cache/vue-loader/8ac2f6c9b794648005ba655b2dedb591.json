{"remainingRequest":"C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\src\\views\\ums\\role\\allocMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\src\\views\\ums\\role\\allocMenu.vue","mtime":1686330462000},{"path":"C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DIO\\Desktop\\云统战\\qianduantongzhan\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715100000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgaW1wb3J0IHtmZXRjaFRyZWVMaXN0fSBmcm9tICdAL2FwaS9tZW51JzsKICBpbXBvcnQge2xpc3RNZW51QnlSb2xlLGFsbG9jTWVudX0gZnJvbSAnQC9hcGkvcm9sZSc7CgogIGV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICJhbGxvY01lbnUiLAogICAgZGF0YSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBtZW51VHJlZUxpc3Q6IFtdLAogICAgICAgIGRlZmF1bHRQcm9wczogewogICAgICAgICAgY2hpbGRyZW46ICdjaGlsZHJlbicsCiAgICAgICAgICBsYWJlbDogJ3RpdGxlJwogICAgICAgIH0sCiAgICAgICAgcm9sZUlkOm51bGwKICAgICAgfTsKICAgIH0sCiAgICBjcmVhdGVkKCkgewogICAgICB0aGlzLnJvbGVJZCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LnJvbGVJZDsKICAgICAgdGhpcy50cmVlTGlzdCgpOwogICAgICB0aGlzLmdldFJvbGVNZW51KHRoaXMucm9sZUlkKTsKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgIHRyZWVMaXN0KCkgewogICAgICAgIGZldGNoVHJlZUxpc3QoKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgIHRoaXMubWVudVRyZWVMaXN0ID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgZ2V0Um9sZU1lbnUocm9sZUlkKXsKICAgICAgICBsaXN0TWVudUJ5Um9sZShyb2xlSWQpLnRoZW4ocmVzcG9uc2U9PnsKICAgICAgICAgIGxldCBtZW51TGlzdCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICBsZXQgY2hlY2tlZE1lbnVJZHM9W107CiAgICAgICAgICBpZihtZW51TGlzdCE9bnVsbCYmbWVudUxpc3QubGVuZ3RoPjApewogICAgICAgICAgICBmb3IobGV0IGk9MDtpPG1lbnVMaXN0Lmxlbmd0aDtpKyspewogICAgICAgICAgICAgIGxldCBtZW51ID0gbWVudUxpc3RbaV07CiAgICAgICAgICAgICAgaWYobWVudS5wYXJlbnRJZCE9PTApewogICAgICAgICAgICAgICAgY2hlY2tlZE1lbnVJZHMucHVzaChtZW51LmlkKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuJHJlZnMudHJlZS5zZXRDaGVja2VkS2V5cyhjaGVja2VkTWVudUlkcyk7CiAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGhhbmRsZVNhdmUoKSB7CiAgICAgICAgbGV0IGNoZWNrZWROb2RlcyA9IHRoaXMuJHJlZnMudHJlZS5nZXRDaGVja2VkTm9kZXMoKTsKICAgICAgICBsZXQgY2hlY2tlZE1lbnVJZHM9bmV3IFNldCgpOwogICAgICAgIGlmKGNoZWNrZWROb2RlcyE9bnVsbCYmY2hlY2tlZE5vZGVzLmxlbmd0aD4wKXsKICAgICAgICAgIGZvcihsZXQgaT0wO2k8Y2hlY2tlZE5vZGVzLmxlbmd0aDtpKyspewogICAgICAgICAgICBsZXQgY2hlY2tlZE5vZGUgPSBjaGVja2VkTm9kZXNbaV07CiAgICAgICAgICAgIGNoZWNrZWRNZW51SWRzLmFkZChjaGVja2VkTm9kZS5pZCk7CiAgICAgICAgICAgIGlmKGNoZWNrZWROb2RlLnBhcmVudElkIT09MCl7CiAgICAgICAgICAgICAgY2hlY2tlZE1lbnVJZHMuYWRkKGNoZWNrZWROb2RlLnBhcmVudElkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLiRjb25maXJtKCfmmK/lkKbliIbphY3oj5zljZXvvJ8nLCAn5o+Q56S6JywgewogICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgICB9KS50aGVuKCgpPT57CiAgICAgICAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpOwogICAgICAgICAgcGFyYW1zLmFwcGVuZCgicm9sZUlkIix0aGlzLnJvbGVJZCk7CiAgICAgICAgICBwYXJhbXMuYXBwZW5kKCJtZW51SWRzIixBcnJheS5mcm9tKGNoZWNrZWRNZW51SWRzKSk7CiAgICAgICAgICBhbGxvY01lbnUocGFyYW1zKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICAgICAgbWVzc2FnZTogJ+WIhumFjeaIkOWKnycsCiAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLAogICAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLiRyb3V0ZXIuYmFjaygpOwogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICB9LAogICAgICBoYW5kbGVDbGVhcigpIHsKICAgICAgICB0aGlzLiRyZWZzLnRyZWUuc2V0Q2hlY2tlZEtleXMoW10pOwogICAgICB9CiAgICB9CiAgfQo="},{"version":3,"sources":["allocMenu.vue"],"names":[],"mappings":";AAoBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"allocMenu.vue","sourceRoot":"src/views/ums/role","sourcesContent":["<template>\n  <el-card class=\"form-container\" shadow=\"never\">\n    <el-tree\n      :data=\"menuTreeList\"\n      show-checkbox\n      default-expand-all\n      node-key=\"id\"\n      ref=\"tree\"\n      highlight-current\n      :props=\"defaultProps\">\n    </el-tree>\n    <div style=\"margin-top: 20px\" align=\"center\">\n      <el-button type=\"primary\" @click=\"handleSave()\">保存</el-button>\n      <el-button @click=\"handleClear()\">清空</el-button>\n    </div>\n\n  </el-card>\n</template>\n\n<script>\n  import {fetchTreeList} from '@/api/menu';\n  import {listMenuByRole,allocMenu} from '@/api/role';\n\n  export default {\n    name: \"allocMenu\",\n    data() {\n      return {\n        menuTreeList: [],\n        defaultProps: {\n          children: 'children',\n          label: 'title'\n        },\n        roleId:null\n      };\n    },\n    created() {\n      this.roleId = this.$route.query.roleId;\n      this.treeList();\n      this.getRoleMenu(this.roleId);\n    },\n    methods: {\n      treeList() {\n        fetchTreeList().then(response => {\n          this.menuTreeList = response.data;\n        });\n      },\n      getRoleMenu(roleId){\n        listMenuByRole(roleId).then(response=>{\n          let menuList = response.data;\n          let checkedMenuIds=[];\n          if(menuList!=null&&menuList.length>0){\n            for(let i=0;i<menuList.length;i++){\n              let menu = menuList[i];\n              if(menu.parentId!==0){\n                checkedMenuIds.push(menu.id);\n              }\n            }\n          }\n          this.$refs.tree.setCheckedKeys(checkedMenuIds);\n        });\n      },\n      handleSave() {\n        let checkedNodes = this.$refs.tree.getCheckedNodes();\n        let checkedMenuIds=new Set();\n        if(checkedNodes!=null&&checkedNodes.length>0){\n          for(let i=0;i<checkedNodes.length;i++){\n            let checkedNode = checkedNodes[i];\n            checkedMenuIds.add(checkedNode.id);\n            if(checkedNode.parentId!==0){\n              checkedMenuIds.add(checkedNode.parentId);\n            }\n          }\n        }\n        this.$confirm('是否分配菜单？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(()=>{\n          let params = new URLSearchParams();\n          params.append(\"roleId\",this.roleId);\n          params.append(\"menuIds\",Array.from(checkedMenuIds));\n          allocMenu(params).then(response => {\n            this.$message({\n              message: '分配成功',\n              type: 'success',\n              duration: 1000\n            });\n            this.$router.back();\n          })\n        })\n      },\n      handleClear() {\n        this.$refs.tree.setCheckedKeys([]);\n      }\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}